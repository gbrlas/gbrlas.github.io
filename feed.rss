<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Goran Brlas</title><description>iOS Engineer @ </description><link>https://gbrlas.github.io</link><language>en</language><lastBuildDate>Wed, 20 May 2020 20:41:57 +0200</lastBuildDate><pubDate>Wed, 20 May 2020 20:41:57 +0200</pubDate><ttl>250</ttl><atom:link href="https://gbrlas.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://gbrlas.github.io/posts/1-grouping</guid><title>Collection grouping simplified</title><description>Collection grouping simplified.</description><link>https://gbrlas.github.io/posts/1-grouping</link><pubDate>Tue, 17 Mar 2020 06:30:00 +0100</pubDate><content:encoded><![CDATA[<h1>Collection grouping simplified</h1><p>We've all probably encountered a situation where we needed to group an array of elements by some value, while still keeping the original order of elements. For example, when you need to group people by their age.</p><pre><code><span class="keyword">struct</span> Person {
    <span class="keyword">let</span> name: <span class="type">String</span>
    <span class="keyword">let</span> age: <span class="type">Int</span>
}

<span class="keyword">let</span> people = [
    <span class="type">Person</span>(name: <span class="string">"Mark"</span>, age: <span class="number">25</span>),
    <span class="type">Person</span>(name: <span class="string">"Ann"</span>, age: <span class="number">24</span>),
    <span class="type">Person</span>(name: <span class="string">"John"</span>, age: <span class="number">25</span>)
]
</code></pre><p>Swift 4.0 introduced the following dictionary functionality which allowed grouping:</p><pre><code><span class="keyword">let</span> grouped = <span class="type">Dictionary</span>(grouping: people) { $0.<span class="property">age</span> }.values

<span class="comment">/// Result</span>
[
    [
        <span class="type">Person</span>(name: <span class="string">"Ann"</span>, age: <span class="number">24</span>)
    ],
    [
        <span class="type">Person</span>(name: <span class="string">"Mark"</span>, age: <span class="number">25</span>),
        <span class="type">Person</span>(name: <span class="string">"John"</span>, age: <span class="number">25</span>)
    ]
]
</code></pre><p>It looks good, right? Unfortunately, not really. Since dictionaries are <em>unordered collections of key-value associations</em>, order of inner arrays might not always be preserved - as seen in the example, array of people aged 24 comes before those aged 25, while it should be reversed since "Mark" is the first person in the starting list.</p><p>Why don't we add some syntactic sugar, as well as make it always sort properly by using the power of swift extensions and generics:</p><pre><code><span class="keyword">extension</span> <span class="type">Collection</span> {

    <span class="keyword">func</span> groupBy&lt;GroupingType: <span class="type">Hashable</span>&gt;(key: (<span class="type">Element</span>) -&gt; (<span class="type">GroupingType</span>)) -&gt; [[<span class="type">Element</span>]] {
        <span class="keyword">var</span> groups: [<span class="type">GroupingType</span>: [<span class="type">Element</span>]] = [:]
        <span class="keyword">var</span> groupsOrder: [<span class="type">GroupingType</span>] = []

        <span class="call">forEach</span> { element <span class="keyword">in
            let</span> key = <span class="call">key</span>(element)

            <span class="keyword">if case nil</span> = groups[key]?.<span class="call">append</span>(element) {
                groups[key] = [element]
                groupsOrder.<span class="call">append</span>(key)
            }
        }

        <span class="keyword">return</span> groupsOrder.<span class="call">map</span> { groups[$0] ?? [] }
    }

}
</code></pre><p>By doing this, our code becomes much cleaner and declarative, as you can see below:</p><pre><code><span class="keyword">let</span> grouped = people.<span class="call">groupBy</span> { $0.<span class="property">age</span> }

<span class="comment">/// Result</span>
[
    [
        <span class="type">Person</span>(name: <span class="string">"Mark"</span>, age: <span class="number">25</span>),
        <span class="type">Person</span>(name: <span class="string">"John"</span>, age: <span class="number">25</span>)
    ],
    [
        <span class="type">Person</span>(name: <span class="string">"Ann"</span>, age: <span class="number">24</span>)
    ]
]
</code></pre><p>Happy grouping!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://gbrlas.github.io/posts/0-intro</guid><title>Hello world.</title><description></description><link>https://gbrlas.github.io/posts/0-intro</link><pubDate>Sun, 15 Mar 2020 15:00:00 +0100</pubDate><content:encoded><![CDATA[<p>Hello World. You know how it goes, every new project starts with pretty much those two words. Why should this one be any different? ðŸ˜„</p><p>Basically, this is the start of me blogging about stuff. Most of it will be development related, but there will be some odd things here and there - fitness, lifestyle, you name it. If you want to know more about me, visit any of the links in the sidebar, or check the <a href="https://www.goranbrl.dev/about/">about page</a>.</p><p>This isn't my first rodeo, since I've been writing these blog post thingies for over two years now. However, I'd like to also cover some topics which aren't really suited for the company's blog, and what better way to do that than by creating one of my own.</p><p>if you'd like to check the previous ones, here's the list sorted by recency:</p><ul><li><a href="https://infinum.com/the-capsized-eight/forget-the-year-of-the-rat-2020-belongs-to-flutter">Forget the Year of the Rat, 2020 Belongs to Flutter</a> - In the past couple of months I've played around with Flutter a bit, and here are some of my thoughts as to why it has a pretty bright future.</li><li><a href="https://infinum.com/the-capsized-eight/easy-way-to-implement-demo-mode-in-ios-apps">Easy Way to Implement Demo Mode in iOS Apps</a> - Waiting forever for the API team to deliver their part? Want to have a demo mode for the Apple review team? Look no further.</li><li><a href="https://infinum.com/the-capsized-eight/repository-full-of-our-best-practices-in-ios-development">A Repository Full of Our Best Practices in iOS Development</a> - We share a lot of code between our projects at Infinum, and this article talks about us open sourcing some of that code. It's well worth a read.</li><li><a href="https://infinum.com/the-capsized-eight/how-to-prepare-your-app-for-dark-mode-in-iOS-13">How to Prepare Your App for Dark Mode in iOS 13</a> - Dark mode blindsided some by coming out of its shadow, but adapting to it should come easily if you're prepared for it.</li><li><a href="https://infinum.com/the-capsized-eight/10-minute-tips-to-make-your-iOS-app-more-interactive">10-Minute Tips to Make Your iOS App More Interactive</a> - We all have a couple of minutes to spare, why not take that time to update your apps with quick, but impactful interactivity improvements?</li><li><a href="https://infinum.com/the-capsized-eight/crash-course-in-augmented-reality-on-ios-with-arkit">A Crash Course in Augmented Reality on iOS with ARKit</a> - ARKit was always fascinating to me, and when its v2 release came out I decided to play around with it a bit more. It turned out to be great, I learned a lot, and it served as a basis for a meetup talk, as well as this article.</li></ul><p>So, get a cup of coffee, lean into your chair and let's get started!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://gbrlas.github.io/posts/2-top_ios_libraries</guid><title>Top 10 Most Useful iOS Libraries in 2020</title><description></description><link>https://gbrlas.github.io/posts/2-top_ios_libraries</link><pubDate>Sun, 15 Mar 2020 15:00:00 +0100</pubDate><content:encoded><![CDATA[<p>I wrote <a href="https://infinum.com/the-capsized-eight/top-10-most-useful-iOS-libraries">a little thing</a> for my company's blog about the top iOS libraries we're currently using in our ongoing projects. Grab a cup of coffe and check it out ðŸ˜„</p><p>P.S. With great power comes great responsibility, so don't use an excavator where a simple shovel would suffice.</p>]]></content:encoded></item></channel></rss>